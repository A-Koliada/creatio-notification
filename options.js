document.addEventListener('DOMContentLoaded', function() {
  // –ï–ª–µ–º–µ–Ω—Ç–∏ DOM t
  const refreshIntervalInput = document.getElementById('refreshInterval');
  const notificationTimeoutTypeSelect = document.getElementById('notificationTimeoutType');
  const timeoutValueGroup = document.getElementById('timeoutValueGroup');
  const notificationTimeoutInput = document.getElementById('notificationTimeout');
  const creatioUrlInput = document.getElementById('creatioUrl');
  const saveBtn = document.getElementById('saveBtn');
  const resetBtn = document.getElementById('resetBtn');
  const statusElement = document.getElementById('status');
  

  const readButton = document.createElement("button");
  readButton.classList.add("mark-read"); // ‚úÖ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ü–µ–π –∫–ª–∞—Å –Ω–µ –∑–º—ñ–Ω–µ–Ω–∏–π
  readButton.textContent = "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ";
  


  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  loadOptions();
  
  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  notificationTimeoutTypeSelect.addEventListener('change', toggleTimeoutValueVisibility);
  saveBtn.addEventListener('click', saveOptions);
  resetBtn.addEventListener('click', resetOptions);
  
  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  function loadOptions() {
    chrome.storage.sync.get({
      refreshInterval: 10,
      notificationTimeout: 0,
      creatioUrl: ''
    }, function(items) {
      refreshIntervalInput.value = items.refreshInterval;
      
      if (items.notificationTimeout > 0) {
        notificationTimeoutTypeSelect.value = 'auto';
        notificationTimeoutInput.value = items.notificationTimeout;
        timeoutValueGroup.style.display = 'block';
      } else {
        notificationTimeoutTypeSelect.value = 'manual';
        notificationTimeoutInput.value = 5; // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        timeoutValueGroup.style.display = 'none';
      }
      
      creatioUrlInput.value = items.creatioUrl;
    });
  }
  
  // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É –∞–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  function toggleTimeoutValueVisibility() {
    if (notificationTimeoutTypeSelect.value === 'auto') {
      timeoutValueGroup.style.display = 'block';
    } else {
      timeoutValueGroup.style.display = 'none';
    }
  }
  
  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  function saveOptions() {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const refreshInterval = Math.max(10, parseInt(refreshIntervalInput.value));
    
    // –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —á–∞—Å—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    let notificationTimeout = 0; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –Ω–µ –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    
    if (notificationTimeoutTypeSelect.value === 'auto') {
      notificationTimeout = parseInt(notificationTimeoutInput.value);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
      if (isNaN(notificationTimeout) || notificationTimeout < 1) {
        notificationTimeout = 5; // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      }
    }
    
    // URL Creatio
    const creatioUrl = creatioUrlInput.value.trim();
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    chrome.storage.sync.set({
      refreshInterval: refreshInterval,
      notificationTimeout: notificationTimeout,
      creatioUrl: creatioUrl
    }, function() {
      // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      showStatus('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ', 'success');
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –≤ –ø–æ–ª—è—Ö —Ñ–æ—Ä–º–∏
      refreshIntervalInput.value = refreshInterval;
      
      if (notificationTimeout > 0) {
        notificationTimeoutTypeSelect.value = 'auto';
        notificationTimeoutInput.value = notificationTimeout;
        timeoutValueGroup.style.display = 'block';
      } else {
        notificationTimeoutTypeSelect.value = 'manual';
        timeoutValueGroup.style.display = 'none';
      }
      
      // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è background script –ø—Ä–æ –∑–º—ñ–Ω—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
      chrome.runtime.sendMessage({
        action: "settingsUpdated",
        settings: {
          refreshInterval: refreshInterval,
          notificationTimeout: notificationTimeout,
          creatioUrl: creatioUrl
        }
      });
    });
  }
  
  // –°–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö
  function resetOptions() {
    const defaultSettings = {
      refreshInterval: 10,
      notificationTimeout: 0,
      creatioUrl: ''
    };
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    chrome.storage.sync.set(defaultSettings, function() {
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
      refreshIntervalInput.value = defaultSettings.refreshInterval;
      notificationTimeoutTypeSelect.value = 'manual';
      notificationTimeoutInput.value = 5;
      timeoutValueGroup.style.display = 'none';
      creatioUrlInput.value = '';
      
      // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è
      showStatus('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö', 'success');
      
      // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è background script –ø—Ä–æ –∑–º—ñ–Ω—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
      chrome.runtime.sendMessage({
        action: "settingsUpdated",
        settings: defaultSettings
      });
    });
  }
  
  // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  function showStatus(message, type) {
    statusElement.textContent = message;
    statusElement.className = 'status ' + type;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
    setTimeout(function() {
      statusElement.textContent = '';
      statusElement.className = 'status';
    }, 3000);
  }
});




async function fetchNotifications() {
  if (!isAuthorized || !creationEndpoint || !currentUserId) {
    console.warn("üö´ –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∞–±–æ –Ω–µ–º–∞—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    updateBadge(0);
    return [];
  }

  const url = `${creationEndpoint}/0/odata/UsrNotification?$filter=UsrisRead eq false&$orderby=CreatedOn desc`;

  console.log("üåê –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ Creatio:", url);

  try {
    const response = await fetch(url, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      credentials: "include" // –í–∞–∂–ª–∏–≤–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ cookies
    });

    if (!response.ok) {
      throw new Error(`–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    console.log("üì© –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:", data);

    if (!data.value || data.value.length === 0) {
      console.warn("‚ö†Ô∏è –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å.");
      updateBadge(0);
      return [];
    }

    updateBadge(data.value.length);

    data.value.forEach((notification) => {
      openNotificationWindow({
        id: notification.Id,
        title: notification.UsrTitle || "–ù–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
        message: notification.Usrmessage || "–ë–µ–∑ —Ç–µ–∫—Å—Ç—É",
        date: notification.CreatedOn,
        url: `${creationEndpoint}/0/Shell/?autoOpenIdLogin=true#Card/Contacts_FormPage/edit/${notification.UsrContactId}`
      });
    });

  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:", error.message);
    if (error.message.includes("Failed to fetch")) {
      console.warn("üî¥ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ CORS –±–ª–æ–∫—É—î –∑–∞–ø–∏—Ç.");
    }
    updateBadge(0);
  }
}
